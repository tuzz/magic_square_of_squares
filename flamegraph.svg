<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="80684"><g><title>magic_square_of_squares`__umodti3 (46 samples, 0.06%)</title><rect x="0.0000%" y="165" width="0.0570%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="46"/><text x="0.2500%" y="175.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::product (29 samples, 0.04%)</title><rect x="0.8354%" y="133" width="0.0359%" height="15" fill="rgb(217,0,24)" fg:x="674" fg:w="29"/><text x="1.0854%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.01%)</title><rect x="0.8787%" y="117" width="0.0136%" height="15" fill="rgb(221,193,54)" fg:x="709" fg:w="11"/><text x="1.1287%" y="127.50"></text></g><g><title>magic_square_of_squares`alloc::vec::Vec&lt;T,A&gt;::dedup_by (35 samples, 0.04%)</title><rect x="0.8936%" y="117" width="0.0434%" height="15" fill="rgb(248,212,6)" fg:x="721" fg:w="35"/><text x="1.1436%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::insert_tail (14 samples, 0.02%)</title><rect x="0.9370%" y="117" width="0.0174%" height="15" fill="rgb(208,68,35)" fg:x="756" fg:w="14"/><text x="1.1870%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_network (55 samples, 0.07%)</title><rect x="0.9543%" y="117" width="0.0682%" height="15" fill="rgb(232,128,0)" fg:x="770" fg:w="55"/><text x="1.2043%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::swap_if_less (25 samples, 0.03%)</title><rect x="0.9915%" y="101" width="0.0310%" height="15" fill="rgb(207,160,47)" fg:x="800" fg:w="25"/><text x="1.2415%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_network (43 samples, 0.05%)</title><rect x="1.0572%" y="101" width="0.0533%" height="15" fill="rgb(228,23,34)" fg:x="853" fg:w="43"/><text x="1.3072%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::swap_if_less (23 samples, 0.03%)</title><rect x="1.0820%" y="85" width="0.0285%" height="15" fill="rgb(218,30,26)" fg:x="873" fg:w="23"/><text x="1.3320%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_network (22 samples, 0.03%)</title><rect x="1.1179%" y="85" width="0.0273%" height="15" fill="rgb(220,122,19)" fg:x="902" fg:w="22"/><text x="1.3679%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::swap_if_less (11 samples, 0.01%)</title><rect x="1.1316%" y="69" width="0.0136%" height="15" fill="rgb(250,228,42)" fg:x="913" fg:w="11"/><text x="1.3816%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_network (13 samples, 0.02%)</title><rect x="1.1514%" y="69" width="0.0161%" height="15" fill="rgb(240,193,28)" fg:x="929" fg:w="13"/><text x="1.4014%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (119 samples, 0.15%)</title><rect x="1.0262%" y="117" width="0.1475%" height="15" fill="rgb(216,20,37)" fg:x="828" fg:w="119"/><text x="1.2762%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (51 samples, 0.06%)</title><rect x="1.1105%" y="101" width="0.0632%" height="15" fill="rgb(206,188,39)" fg:x="896" fg:w="51"/><text x="1.3605%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (22 samples, 0.03%)</title><rect x="1.1464%" y="85" width="0.0273%" height="15" fill="rgb(217,207,13)" fg:x="925" fg:w="22"/><text x="1.3964%" y="95.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::composite_number::CompositeNumber::next_non_final_term (335 samples, 0.42%)</title><rect x="0.7895%" y="149" width="0.4152%" height="15" fill="rgb(231,73,38)" fg:x="637" fg:w="335"/><text x="1.0395%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::sort_and_dedup_by_c_and_a (267 samples, 0.33%)</title><rect x="0.8738%" y="133" width="0.3309%" height="15" fill="rgb(225,20,46)" fg:x="705" fg:w="267"/><text x="1.1238%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (25 samples, 0.03%)</title><rect x="1.1737%" y="117" width="0.0310%" height="15" fill="rgb(210,31,41)" fg:x="947" fg:w="25"/><text x="1.4237%" y="127.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::extend (262 samples, 0.32%)</title><rect x="1.2047%" y="149" width="0.3247%" height="15" fill="rgb(221,200,47)" fg:x="972" fg:w="262"/><text x="1.4547%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::into_magic_triples (354 samples, 0.44%)</title><rect x="1.5294%" y="149" width="0.4387%" height="15" fill="rgb(226,26,5)" fg:x="1234" fg:w="354"/><text x="1.7794%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::product (339 samples, 0.42%)</title><rect x="1.9682%" y="149" width="0.4202%" height="15" fill="rgb(249,33,26)" fg:x="1588" fg:w="339"/><text x="2.2182%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::push (303 samples, 0.38%)</title><rect x="2.3883%" y="149" width="0.3755%" height="15" fill="rgb(235,183,28)" fg:x="1927" fg:w="303"/><text x="2.6383%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (277 samples, 0.34%)</title><rect x="2.7639%" y="149" width="0.3433%" height="15" fill="rgb(221,5,38)" fg:x="2230" fg:w="277"/><text x="3.0139%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::sort_and_dedup_by_primitive_and_a (178 samples, 0.22%)</title><rect x="3.1072%" y="149" width="0.2206%" height="15" fill="rgb(247,18,42)" fg:x="2507" fg:w="178"/><text x="3.3572%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (501 samples, 0.62%)</title><rect x="7.7302%" y="133" width="0.6209%" height="15" fill="rgb(241,131,45)" fg:x="6237" fg:w="501"/><text x="7.9802%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (192 samples, 0.24%)</title><rect x="8.3511%" y="133" width="0.2380%" height="15" fill="rgb(249,31,29)" fg:x="6738" fg:w="192"/><text x="8.6011%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4,065 samples, 5.04%)</title><rect x="8.5891%" y="133" width="5.0382%" height="15" fill="rgb(225,111,53)" fg:x="6930" fg:w="4065"/><text x="8.8391%" y="143.50">libsys..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2,050 samples, 2.54%)</title><rect x="13.6272%" y="133" width="2.5408%" height="15" fill="rgb(238,160,17)" fg:x="10995" fg:w="2050"/><text x="13.8772%" y="143.50">li..</text></g><g><title>magic_square_of_squares`DYLD-STUB$$bzero (500 samples, 0.62%)</title><rect x="16.1680%" y="133" width="0.6197%" height="15" fill="rgb(214,148,48)" fg:x="13045" fg:w="500"/><text x="16.4180%" y="143.50"></text></g><g><title>magic_square_of_squares`DYLD-STUB$$memcpy (825 samples, 1.02%)</title><rect x="16.7877%" y="133" width="1.0225%" height="15" fill="rgb(232,36,49)" fg:x="13545" fg:w="825"/><text x="17.0377%" y="143.50"></text></g><g><title>magic_square_of_squares`core::ops::function::FnOnce::call_once (85 samples, 0.11%)</title><rect x="17.8102%" y="133" width="0.1053%" height="15" fill="rgb(209,103,24)" fg:x="14370" fg:w="85"/><text x="18.0602%" y="143.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::insertion_sort_shift_left (5,990 samples, 7.42%)</title><rect x="17.9156%" y="133" width="7.4240%" height="15" fill="rgb(229,88,8)" fg:x="14455" fg:w="5990"/><text x="18.1656%" y="143.50">magic_squa..</text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (86 samples, 0.11%)</title><rect x="25.3396%" y="133" width="0.1066%" height="15" fill="rgb(213,181,19)" fg:x="20445" fg:w="86"/><text x="25.5896%" y="143.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::ipnsort (135 samples, 0.17%)</title><rect x="25.4462%" y="133" width="0.1673%" height="15" fill="rgb(254,191,54)" fg:x="20531" fg:w="135"/><text x="25.6962%" y="143.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (27 samples, 0.03%)</title><rect x="25.6135%" y="133" width="0.0335%" height="15" fill="rgb(241,83,37)" fg:x="20666" fg:w="27"/><text x="25.8635%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::extend (792 samples, 0.98%)</title><rect x="25.6470%" y="133" width="0.9816%" height="15" fill="rgb(233,36,39)" fg:x="20693" fg:w="792"/><text x="25.8970%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::into_magic_triples (5,649 samples, 7.00%)</title><rect x="26.6286%" y="133" width="7.0014%" height="15" fill="rgb(226,3,54)" fg:x="21485" fg:w="5649"/><text x="26.8786%" y="143.50">magic_squ..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::product (5,515 samples, 6.84%)</title><rect x="33.6300%" y="133" width="6.8353%" height="15" fill="rgb(245,192,40)" fg:x="27134" fg:w="5515"/><text x="33.8800%" y="143.50">magic_squ..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::push (547 samples, 0.68%)</title><rect x="40.4653%" y="133" width="0.6780%" height="15" fill="rgb(238,167,29)" fg:x="32649" fg:w="547"/><text x="40.7153%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (5,111 samples, 6.33%)</title><rect x="41.1432%" y="133" width="6.3346%" height="15" fill="rgb(232,182,51)" fg:x="33196" fg:w="5111"/><text x="41.3932%" y="143.50">magic_sq..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,234 samples, 2.77%)</title><rect x="57.2307%" y="117" width="2.7688%" height="15" fill="rgb(231,60,39)" fg:x="46176" fg:w="2234"/><text x="57.4807%" y="127.50">li..</text></g><g><title>magic_square_of_squares`DYLD-STUB$$memcpy (411 samples, 0.51%)</title><rect x="59.9995%" y="117" width="0.5094%" height="15" fill="rgb(208,69,12)" fg:x="48410" fg:w="411"/><text x="60.2495%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::pivot::median3_rec (11 samples, 0.01%)</title><rect x="60.5089%" y="117" width="0.0136%" height="15" fill="rgb(235,93,37)" fg:x="48821" fg:w="11"/><text x="60.7589%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (2,811 samples, 3.48%)</title><rect x="60.5225%" y="117" width="3.4840%" height="15" fill="rgb(213,116,39)" fg:x="48832" fg:w="2811"/><text x="60.7725%" y="127.50">mag..</text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (707 samples, 0.88%)</title><rect x="64.0065%" y="117" width="0.8763%" height="15" fill="rgb(222,207,29)" fg:x="51643" fg:w="707"/><text x="64.2565%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::pivot::median3_rec (52 samples, 0.06%)</title><rect x="66.6229%" y="101" width="0.0644%" height="15" fill="rgb(206,96,30)" fg:x="53754" fg:w="52"/><text x="66.8729%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (2,783 samples, 3.45%)</title><rect x="66.6873%" y="101" width="3.4493%" height="15" fill="rgb(218,138,4)" fg:x="53806" fg:w="2783"/><text x="66.9373%" y="111.50">mag..</text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (571 samples, 0.71%)</title><rect x="70.1366%" y="101" width="0.7077%" height="15" fill="rgb(250,191,14)" fg:x="56589" fg:w="571"/><text x="70.3866%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::pivot::median3_rec (12 samples, 0.01%)</title><rect x="71.4813%" y="85" width="0.0149%" height="15" fill="rgb(239,60,40)" fg:x="57674" fg:w="12"/><text x="71.7313%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (920 samples, 1.14%)</title><rect x="71.4962%" y="85" width="1.1403%" height="15" fill="rgb(206,27,48)" fg:x="57686" fg:w="920"/><text x="71.7462%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (149 samples, 0.18%)</title><rect x="72.6365%" y="85" width="0.1847%" height="15" fill="rgb(225,35,8)" fg:x="58606" fg:w="149"/><text x="72.8865%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (323 samples, 0.40%)</title><rect x="73.0368%" y="69" width="0.4003%" height="15" fill="rgb(250,213,24)" fg:x="58929" fg:w="323"/><text x="73.2868%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (50 samples, 0.06%)</title><rect x="73.4371%" y="69" width="0.0620%" height="15" fill="rgb(247,123,22)" fg:x="59252" fg:w="50"/><text x="73.6871%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (76 samples, 0.09%)</title><rect x="73.5549%" y="53" width="0.0942%" height="15" fill="rgb(231,138,38)" fg:x="59347" fg:w="76"/><text x="73.8049%" y="63.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (23 samples, 0.03%)</title><rect x="73.6652%" y="37" width="0.0285%" height="15" fill="rgb(231,145,46)" fg:x="59436" fg:w="23"/><text x="73.9152%" y="47.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (7,112 samples, 8.81%)</title><rect x="64.8828%" y="117" width="8.8146%" height="15" fill="rgb(251,118,11)" fg:x="52350" fg:w="7112"/><text x="65.1328%" y="127.50">magic_square..</text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (2,302 samples, 2.85%)</title><rect x="70.8443%" y="101" width="2.8531%" height="15" fill="rgb(217,147,25)" fg:x="57160" fg:w="2302"/><text x="71.0943%" y="111.50">ma..</text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (707 samples, 0.88%)</title><rect x="72.8211%" y="85" width="0.8763%" height="15" fill="rgb(247,81,37)" fg:x="58755" fg:w="707"/><text x="73.0711%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (160 samples, 0.20%)</title><rect x="73.4991%" y="69" width="0.1983%" height="15" fill="rgb(209,12,38)" fg:x="59302" fg:w="160"/><text x="73.7491%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (33 samples, 0.04%)</title><rect x="73.6565%" y="53" width="0.0409%" height="15" fill="rgb(227,1,9)" fg:x="59429" fg:w="33"/><text x="73.9065%" y="63.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::sort_and_dedup_by_primitive_and_a (25,766 samples, 31.93%)</title><rect x="47.4778%" y="133" width="31.9345%" height="15" fill="rgb(248,47,43)" fg:x="38307" fg:w="25766"/><text x="47.7278%" y="143.50">magic_square_of_squares`magic_square_of_squares::pyt..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (4,611 samples, 5.71%)</title><rect x="73.6974%" y="117" width="5.7149%" height="15" fill="rgb(221,10,30)" fg:x="59462" fg:w="4611"/><text x="73.9474%" y="127.50">magic_s..</text></g><g><title>libdyld.dylib`tlv_get_addr (512 samples, 0.63%)</title><rect x="98.2574%" y="117" width="0.6346%" height="15" fill="rgb(210,229,1)" fg:x="79278" fg:w="512"/><text x="98.5074%" y="127.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::composite_number::CompositeNumber::for_each (79,880 samples, 99.00%)</title><rect x="0.0570%" y="165" width="99.0035%" height="15" fill="rgb(222,148,37)" fg:x="46" fg:w="79880"/><text x="0.3070%" y="175.50">magic_square_of_squares`magic_square_of_squares::composite_number::CompositeNumber::for_each</text></g><g><title>magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with (77,241 samples, 95.73%)</title><rect x="3.3278%" y="149" width="95.7327%" height="15" fill="rgb(234,67,33)" fg:x="2685" fg:w="77241"/><text x="3.5778%" y="159.50">magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with (15,853 samples, 19.65%)</title><rect x="79.4123%" y="133" width="19.6483%" height="15" fill="rgb(247,98,35)" fg:x="64073" fg:w="15853"/><text x="79.6623%" y="143.50">magic_square_of_squares`std::th..</text></g><g><title>magic_square_of_squares`core::ops::function::FnOnce::call_once (136 samples, 0.17%)</title><rect x="98.8920%" y="117" width="0.1686%" height="15" fill="rgb(247,138,52)" fg:x="79790" fg:w="136"/><text x="99.1420%" y="127.50"></text></g><g><title>magic_square_of_squares`__umodti3 (52 samples, 0.06%)</title><rect x="99.4001%" y="149" width="0.0644%" height="15" fill="rgb(213,79,30)" fg:x="80200" fg:w="52"/><text x="99.6501%" y="159.50"></text></g><g><title>magic_square_of_squares`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (17 samples, 0.02%)</title><rect x="99.4646%" y="149" width="0.0211%" height="15" fill="rgb(246,177,23)" fg:x="80252" fg:w="17"/><text x="99.7146%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::new (575 samples, 0.71%)</title><rect x="99.0655%" y="165" width="0.7127%" height="15" fill="rgb(230,62,27)" fg:x="79930" fg:w="575"/><text x="99.3155%" y="175.50"></text></g><g><title>magic_square_of_squares`compiler_builtins::int::specialized_div_rem::u128_div_rem (236 samples, 0.29%)</title><rect x="99.4856%" y="149" width="0.2925%" height="15" fill="rgb(216,154,8)" fg:x="80269" fg:w="236"/><text x="99.7356%" y="159.50"></text></g><g><title>dyld`start (80,683 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9988%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="80683"/><text x="0.2500%" y="271.50">dyld`start</text></g><g><title>magic_square_of_squares`main (80,683 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9988%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="80683"/><text x="0.2500%" y="255.50">magic_square_of_squares`main</text></g><g><title>magic_square_of_squares`std::rt::lang_start_internal (80,683 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9988%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="80683"/><text x="0.2500%" y="239.50">magic_square_of_squares`std::rt::lang_start_internal</text></g><g><title>magic_square_of_squares`std::rt::lang_start::_{{closure}} (80,683 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9988%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="80683"/><text x="0.2500%" y="223.50">magic_square_of_squares`std::rt::lang_start::_{{closure}}</text></g><g><title>magic_square_of_squares`std::sys::backtrace::__rust_begin_short_backtrace (80,683 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9988%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="80683"/><text x="0.2500%" y="207.50">magic_square_of_squares`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>magic_square_of_squares`magic_square_of_squares::main (80,683 samples, 100.00%)</title><rect x="0.0000%" y="181" width="99.9988%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="80683"/><text x="0.2500%" y="191.50">magic_square_of_squares`magic_square_of_squares::main</text></g><g><title>magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with (178 samples, 0.22%)</title><rect x="99.7781%" y="165" width="0.2206%" height="15" fill="rgb(209,38,44)" fg:x="80505" fg:w="178"/><text x="100.0281%" y="175.50"></text></g><g><title>all (80,684 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="80684"/><text x="0.2500%" y="287.50"></text></g></svg></svg>