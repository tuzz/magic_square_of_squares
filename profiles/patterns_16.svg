<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="20541"><g><title>magic_square_of_squares`__umodti3 (37 samples, 0.18%)</title><rect x="0.0049%" y="165" width="0.1801%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="37"/><text x="0.2549%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.04%)</title><rect x="1.0954%" y="133" width="0.0438%" height="15" fill="rgb(217,0,24)" fg:x="225" fg:w="9"/><text x="1.3454%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.02%)</title><rect x="1.1392%" y="133" width="0.0243%" height="15" fill="rgb(221,193,54)" fg:x="234" fg:w="5"/><text x="1.3892%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::extend (3 samples, 0.01%)</title><rect x="1.1830%" y="133" width="0.0146%" height="15" fill="rgb(248,212,6)" fg:x="243" fg:w="3"/><text x="1.4330%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::product (18 samples, 0.09%)</title><rect x="1.1976%" y="133" width="0.0876%" height="15" fill="rgb(208,68,35)" fg:x="246" fg:w="18"/><text x="1.4476%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.04%)</title><rect x="1.3096%" y="117" width="0.0438%" height="15" fill="rgb(232,128,0)" fg:x="269" fg:w="9"/><text x="1.5596%" y="127.50"></text></g><g><title>magic_square_of_squares`alloc::vec::Vec&lt;T,A&gt;::dedup_by (17 samples, 0.08%)</title><rect x="1.3534%" y="117" width="0.0828%" height="15" fill="rgb(207,160,47)" fg:x="278" fg:w="17"/><text x="1.6034%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::insert_tail (5 samples, 0.02%)</title><rect x="1.4410%" y="117" width="0.0243%" height="15" fill="rgb(228,23,34)" fg:x="296" fg:w="5"/><text x="1.6910%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::insert_tail (3 samples, 0.01%)</title><rect x="1.5287%" y="101" width="0.0146%" height="15" fill="rgb(218,30,26)" fg:x="314" fg:w="3"/><text x="1.7787%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_network (36 samples, 0.18%)</title><rect x="1.4654%" y="117" width="0.1753%" height="15" fill="rgb(220,122,19)" fg:x="301" fg:w="36"/><text x="1.7154%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::swap_if_less (20 samples, 0.10%)</title><rect x="1.5433%" y="101" width="0.0974%" height="15" fill="rgb(250,228,42)" fg:x="317" fg:w="20"/><text x="1.7933%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::insert_tail (8 samples, 0.04%)</title><rect x="1.7380%" y="85" width="0.0389%" height="15" fill="rgb(240,193,28)" fg:x="357" fg:w="8"/><text x="1.9880%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_network (22 samples, 0.11%)</title><rect x="1.7136%" y="101" width="0.1071%" height="15" fill="rgb(216,20,37)" fg:x="352" fg:w="22"/><text x="1.9636%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::swap_if_less (9 samples, 0.04%)</title><rect x="1.7769%" y="85" width="0.0438%" height="15" fill="rgb(206,188,39)" fg:x="365" fg:w="9"/><text x="2.0269%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_network (6 samples, 0.03%)</title><rect x="1.8354%" y="85" width="0.0292%" height="15" fill="rgb(217,207,13)" fg:x="377" fg:w="6"/><text x="2.0854%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::swap_if_less (5 samples, 0.02%)</title><rect x="1.8402%" y="69" width="0.0243%" height="15" fill="rgb(231,73,38)" fg:x="378" fg:w="5"/><text x="2.0902%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (45 samples, 0.22%)</title><rect x="1.6504%" y="117" width="0.2191%" height="15" fill="rgb(225,20,46)" fg:x="339" fg:w="45"/><text x="1.9004%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (10 samples, 0.05%)</title><rect x="1.8207%" y="101" width="0.0487%" height="15" fill="rgb(210,31,41)" fg:x="374" fg:w="10"/><text x="2.0707%" y="111.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::composite_number::CompositeNumber::next_non_final_term (195 samples, 0.95%)</title><rect x="0.9980%" y="149" width="0.9493%" height="15" fill="rgb(221,200,47)" fg:x="205" fg:w="195"/><text x="1.2480%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::sort_and_dedup_by_c_and_a (134 samples, 0.65%)</title><rect x="1.2950%" y="133" width="0.6524%" height="15" fill="rgb(226,26,5)" fg:x="266" fg:w="134"/><text x="1.5450%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (16 samples, 0.08%)</title><rect x="1.8694%" y="117" width="0.0779%" height="15" fill="rgb(249,33,26)" fg:x="384" fg:w="16"/><text x="2.1194%" y="127.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::extend (67 samples, 0.33%)</title><rect x="1.9473%" y="149" width="0.3262%" height="15" fill="rgb(235,183,28)" fg:x="400" fg:w="67"/><text x="2.1973%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::into_magic_triples (94 samples, 0.46%)</title><rect x="2.2735%" y="149" width="0.4576%" height="15" fill="rgb(221,5,38)" fg:x="467" fg:w="94"/><text x="2.5235%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::product (70 samples, 0.34%)</title><rect x="2.7311%" y="149" width="0.3408%" height="15" fill="rgb(247,18,42)" fg:x="561" fg:w="70"/><text x="2.9811%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::push (68 samples, 0.33%)</title><rect x="3.0719%" y="149" width="0.3310%" height="15" fill="rgb(241,131,45)" fg:x="631" fg:w="68"/><text x="3.3219%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (81 samples, 0.39%)</title><rect x="3.4030%" y="149" width="0.3943%" height="15" fill="rgb(249,31,29)" fg:x="699" fg:w="81"/><text x="3.6530%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::sort_and_dedup_by_primitive_and_a (46 samples, 0.22%)</title><rect x="3.7973%" y="149" width="0.2239%" height="15" fill="rgb(225,111,53)" fg:x="780" fg:w="46"/><text x="4.0473%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (116 samples, 0.56%)</title><rect x="7.1905%" y="133" width="0.5647%" height="15" fill="rgb(238,160,17)" fg:x="1477" fg:w="116"/><text x="7.4405%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (55 samples, 0.27%)</title><rect x="7.7552%" y="133" width="0.2678%" height="15" fill="rgb(214,148,48)" fg:x="1593" fg:w="55"/><text x="8.0052%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,010 samples, 4.92%)</title><rect x="8.0230%" y="133" width="4.9170%" height="15" fill="rgb(232,36,49)" fg:x="1648" fg:w="1010"/><text x="8.2730%" y="143.50">libsys..</text></g><g><title>libsystem_platform.dylib`_platform_memset (476 samples, 2.32%)</title><rect x="12.9400%" y="133" width="2.3173%" height="15" fill="rgb(209,103,24)" fg:x="2658" fg:w="476"/><text x="13.1900%" y="143.50">l..</text></g><g><title>magic_square_of_squares`DYLD-STUB$$bzero (137 samples, 0.67%)</title><rect x="15.2573%" y="133" width="0.6670%" height="15" fill="rgb(229,88,8)" fg:x="3134" fg:w="137"/><text x="15.5073%" y="143.50"></text></g><g><title>magic_square_of_squares`DYLD-STUB$$memcpy (196 samples, 0.95%)</title><rect x="15.9242%" y="133" width="0.9542%" height="15" fill="rgb(213,181,19)" fg:x="3271" fg:w="196"/><text x="16.1742%" y="143.50"></text></g><g><title>magic_square_of_squares`core::ops::function::FnOnce::call_once (38 samples, 0.18%)</title><rect x="16.8784%" y="133" width="0.1850%" height="15" fill="rgb(254,191,54)" fg:x="3467" fg:w="38"/><text x="17.1284%" y="143.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,531 samples, 7.45%)</title><rect x="17.0634%" y="133" width="7.4534%" height="15" fill="rgb(241,83,37)" fg:x="3505" fg:w="1531"/><text x="17.3134%" y="143.50">magic_squa..</text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (25 samples, 0.12%)</title><rect x="24.5168%" y="133" width="0.1217%" height="15" fill="rgb(233,36,39)" fg:x="5036" fg:w="25"/><text x="24.7668%" y="143.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::ipnsort (20 samples, 0.10%)</title><rect x="24.6385%" y="133" width="0.0974%" height="15" fill="rgb(226,3,54)" fg:x="5061" fg:w="20"/><text x="24.8885%" y="143.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (6 samples, 0.03%)</title><rect x="24.7359%" y="133" width="0.0292%" height="15" fill="rgb(245,192,40)" fg:x="5081" fg:w="6"/><text x="24.9859%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::patterns_16::check_pattern_1 (50 samples, 0.24%)</title><rect x="24.7651%" y="133" width="0.2434%" height="15" fill="rgb(238,167,29)" fg:x="5087" fg:w="50"/><text x="25.0151%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::patterns_16::check_pattern_6 (26 samples, 0.13%)</title><rect x="25.0085%" y="133" width="0.1266%" height="15" fill="rgb(232,182,51)" fg:x="5137" fg:w="26"/><text x="25.2585%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::extend (196 samples, 0.95%)</title><rect x="25.1351%" y="133" width="0.9542%" height="15" fill="rgb(231,60,39)" fg:x="5163" fg:w="196"/><text x="25.3851%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::into_magic_triples (1,238 samples, 6.03%)</title><rect x="26.0893%" y="133" width="6.0270%" height="15" fill="rgb(208,69,12)" fg:x="5359" fg:w="1238"/><text x="26.3393%" y="143.50">magic_sq..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::product (1,194 samples, 5.81%)</title><rect x="32.1163%" y="133" width="5.8128%" height="15" fill="rgb(235,93,37)" fg:x="6597" fg:w="1194"/><text x="32.3663%" y="143.50">magic_s..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::push (88 samples, 0.43%)</title><rect x="37.9290%" y="133" width="0.4284%" height="15" fill="rgb(213,116,39)" fg:x="7791" fg:w="88"/><text x="38.1790%" y="143.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (1,131 samples, 5.51%)</title><rect x="38.3574%" y="133" width="5.5061%" height="15" fill="rgb(222,207,29)" fg:x="7879" fg:w="1131"/><text x="38.6074%" y="143.50">magic_s..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (573 samples, 2.79%)</title><rect x="52.4220%" y="117" width="2.7895%" height="15" fill="rgb(206,96,30)" fg:x="10768" fg:w="573"/><text x="52.6720%" y="127.50">li..</text></g><g><title>magic_square_of_squares`DYLD-STUB$$memcpy (114 samples, 0.55%)</title><rect x="55.2115%" y="117" width="0.5550%" height="15" fill="rgb(218,138,4)" fg:x="11341" fg:w="114"/><text x="55.4615%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::pivot::median3_rec (4 samples, 0.02%)</title><rect x="55.7665%" y="117" width="0.0195%" height="15" fill="rgb(250,191,14)" fg:x="11455" fg:w="4"/><text x="56.0165%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (659 samples, 3.21%)</title><rect x="55.7860%" y="117" width="3.2082%" height="15" fill="rgb(239,60,40)" fg:x="11459" fg:w="659"/><text x="56.0360%" y="127.50">mag..</text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (135 samples, 0.66%)</title><rect x="58.9942%" y="117" width="0.6572%" height="15" fill="rgb(206,27,48)" fg:x="12118" fg:w="135"/><text x="59.2442%" y="127.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::pivot::median3_rec (14 samples, 0.07%)</title><rect x="60.9415%" y="101" width="0.0682%" height="15" fill="rgb(225,35,8)" fg:x="12518" fg:w="14"/><text x="61.1915%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (555 samples, 2.70%)</title><rect x="61.0097%" y="101" width="2.7019%" height="15" fill="rgb(250,213,24)" fg:x="12532" fg:w="555"/><text x="61.2597%" y="111.50">ma..</text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (122 samples, 0.59%)</title><rect x="63.7116%" y="101" width="0.5939%" height="15" fill="rgb(247,123,22)" fg:x="13087" fg:w="122"/><text x="63.9616%" y="111.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (152 samples, 0.74%)</title><rect x="64.7096%" y="85" width="0.7400%" height="15" fill="rgb(231,138,38)" fg:x="13292" fg:w="152"/><text x="64.9596%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (27 samples, 0.13%)</title><rect x="65.4496%" y="85" width="0.1314%" height="15" fill="rgb(231,145,46)" fg:x="13444" fg:w="27"/><text x="65.6996%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (52 samples, 0.25%)</title><rect x="65.7660%" y="69" width="0.2532%" height="15" fill="rgb(251,118,11)" fg:x="13509" fg:w="52"/><text x="66.0160%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (7 samples, 0.03%)</title><rect x="66.0192%" y="69" width="0.0341%" height="15" fill="rgb(217,147,25)" fg:x="13561" fg:w="7"/><text x="66.2692%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (6 samples, 0.03%)</title><rect x="66.0873%" y="53" width="0.0292%" height="15" fill="rgb(247,81,37)" fg:x="13575" fg:w="6"/><text x="66.3373%" y="63.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::sort8_stable (4 samples, 0.02%)</title><rect x="66.1165%" y="53" width="0.0195%" height="15" fill="rgb(209,12,38)" fg:x="13581" fg:w="4"/><text x="66.3665%" y="63.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::shared::smallsort::small_sort_general (4 samples, 0.02%)</title><rect x="66.1458%" y="37" width="0.0195%" height="15" fill="rgb(227,1,9)" fg:x="13587" fg:w="4"/><text x="66.3958%" y="47.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (1,339 samples, 6.52%)</title><rect x="59.6514%" y="117" width="6.5187%" height="15" fill="rgb(248,47,43)" fg:x="12253" fg:w="1339"/><text x="59.9014%" y="127.50">magic_squ..</text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (383 samples, 1.86%)</title><rect x="64.3055%" y="101" width="1.8646%" height="15" fill="rgb(221,10,30)" fg:x="13209" fg:w="383"/><text x="64.5555%" y="111.50">m..</text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (121 samples, 0.59%)</title><rect x="65.5810%" y="85" width="0.5891%" height="15" fill="rgb(210,229,1)" fg:x="13471" fg:w="121"/><text x="65.8310%" y="95.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (24 samples, 0.12%)</title><rect x="66.0533%" y="69" width="0.1168%" height="15" fill="rgb(222,148,37)" fg:x="13568" fg:w="24"/><text x="66.3033%" y="79.50"></text></g><g><title>magic_square_of_squares`core::slice::sort::unstable::quicksort::quicksort (7 samples, 0.03%)</title><rect x="66.1360%" y="53" width="0.0341%" height="15" fill="rgb(234,67,33)" fg:x="13585" fg:w="7"/><text x="66.3860%" y="63.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::sort_and_dedup_by_primitive_and_a (5,624 samples, 27.38%)</title><rect x="43.8635%" y="133" width="27.3794%" height="15" fill="rgb(247,98,35)" fg:x="9010" fg:w="5624"/><text x="44.1135%" y="143.50">magic_square_of_squares`magic_square_of_squa..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::retain_indexes (1,042 samples, 5.07%)</title><rect x="66.1701%" y="117" width="5.0728%" height="15" fill="rgb(247,138,52)" fg:x="13592" fg:w="1042"/><text x="66.4201%" y="127.50">magic_..</text></g><g><title>libdyld.dylib`tlv_get_addr (133 samples, 0.65%)</title><rect x="78.3068%" y="117" width="0.6475%" height="15" fill="rgb(213,79,30)" fg:x="16085" fg:w="133"/><text x="78.5568%" y="127.50"></text></g><g><title>magic_square_of_squares`core::ops::function::FnOnce::call_once (35 samples, 0.17%)</title><rect x="78.9543%" y="117" width="0.1704%" height="15" fill="rgb(246,177,23)" fg:x="16218" fg:w="35"/><text x="79.2043%" y="127.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::patterns_16::check_pattern_1 (2,990 samples, 14.56%)</title><rect x="79.1247%" y="117" width="14.5563%" height="15" fill="rgb(230,62,27)" fg:x="16253" fg:w="2990"/><text x="79.3747%" y="127.50">magic_square_of_square..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::composite_number::CompositeNumber::for_each (19,886 samples, 96.81%)</title><rect x="0.1850%" y="165" width="96.8113%" height="15" fill="rgb(216,154,8)" fg:x="38" fg:w="19886"/><text x="0.4350%" y="175.50">magic_square_of_squares`magic_square_of_squares::composite_number::CompositeNumber::for_each</text></g><g><title>magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with (19,096 samples, 92.97%)</title><rect x="4.0310%" y="149" width="92.9653%" height="15" fill="rgb(244,35,45)" fg:x="828" fg:w="19096"/><text x="4.2810%" y="159.50">magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with (5,290 samples, 25.75%)</title><rect x="71.2429%" y="133" width="25.7534%" height="15" fill="rgb(251,115,12)" fg:x="14634" fg:w="5290"/><text x="71.4929%" y="143.50">magic_square_of_squares`std::thread::loca..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::patterns_16::check_pattern_6 (681 samples, 3.32%)</title><rect x="93.6809%" y="117" width="3.3153%" height="15" fill="rgb(240,54,50)" fg:x="19243" fg:w="681"/><text x="93.9309%" y="127.50">mag..</text></g><g><title>magic_square_of_squares`magic_square_of_squares::composite_number::CompositeNumber::new (3 samples, 0.01%)</title><rect x="96.9963%" y="165" width="0.0146%" height="15" fill="rgb(233,84,52)" fg:x="19924" fg:w="3"/><text x="97.2463%" y="175.50"></text></g><g><title>magic_square_of_squares`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="96.9963%" y="149" width="0.0146%" height="15" fill="rgb(207,117,47)" fg:x="19924" fg:w="3"/><text x="97.2463%" y="159.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::new (3 samples, 0.01%)</title><rect x="96.9963%" y="133" width="0.0146%" height="15" fill="rgb(249,43,39)" fg:x="19924" fg:w="3"/><text x="97.2463%" y="143.50"></text></g><g><title>magic_square_of_squares`primal_sieve::streaming::primes::Primes::sqrt (3 samples, 0.01%)</title><rect x="96.9963%" y="117" width="0.0146%" height="15" fill="rgb(209,38,44)" fg:x="19924" fg:w="3"/><text x="97.2463%" y="127.50"></text></g><g><title>magic_square_of_squares`__umodti3 (55 samples, 0.27%)</title><rect x="98.3886%" y="149" width="0.2678%" height="15" fill="rgb(236,212,23)" fg:x="20210" fg:w="55"/><text x="98.6386%" y="159.50"></text></g><g><title>magic_square_of_squares`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (15 samples, 0.07%)</title><rect x="98.6563%" y="149" width="0.0730%" height="15" fill="rgb(242,79,21)" fg:x="20265" fg:w="15"/><text x="98.9063%" y="159.50"></text></g><g><title>magic_square_of_squares`primal_sieve::streaming::primes::Primes::advance_ones (4 samples, 0.02%)</title><rect x="98.7099%" y="133" width="0.0195%" height="15" fill="rgb(211,96,35)" fg:x="20276" fg:w="4"/><text x="98.9599%" y="143.50"></text></g><g><title>magic_square_of_squares`primal_sieve::streaming::StreamingSieve::next (4 samples, 0.02%)</title><rect x="98.7099%" y="117" width="0.0195%" height="15" fill="rgb(253,215,40)" fg:x="20276" fg:w="4"/><text x="98.9599%" y="127.50"></text></g><g><title>magic_square_of_squares`primal_sieve::wheel::wheel30::hardcoded_sieve (4 samples, 0.02%)</title><rect x="98.7099%" y="101" width="0.0195%" height="15" fill="rgb(211,81,21)" fg:x="20276" fg:w="4"/><text x="98.9599%" y="111.50"></text></g><g><title>magic_square_of_squares`magic_square_of_squares::pythagorean_triples::PythagoreanTriples::new (575 samples, 2.80%)</title><rect x="97.0109%" y="165" width="2.7993%" height="15" fill="rgb(208,190,38)" fg:x="19927" fg:w="575"/><text x="97.2609%" y="175.50">ma..</text></g><g><title>magic_square_of_squares`compiler_builtins::int::specialized_div_rem::u128_div_rem (222 samples, 1.08%)</title><rect x="98.7294%" y="149" width="1.0808%" height="15" fill="rgb(235,213,38)" fg:x="20280" fg:w="222"/><text x="98.9794%" y="159.50"></text></g><g><title>dyld`start (20,540 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9951%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="20540"/><text x="0.2500%" y="271.50">dyld`start</text></g><g><title>magic_square_of_squares`main (20,540 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9951%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="20540"/><text x="0.2500%" y="255.50">magic_square_of_squares`main</text></g><g><title>magic_square_of_squares`std::rt::lang_start_internal (20,539 samples, 99.99%)</title><rect x="0.0049%" y="229" width="99.9903%" height="15" fill="rgb(240,68,47)" fg:x="1" fg:w="20539"/><text x="0.2549%" y="239.50">magic_square_of_squares`std::rt::lang_start_internal</text></g><g><title>magic_square_of_squares`std::rt::lang_start::_{{closure}} (20,539 samples, 99.99%)</title><rect x="0.0049%" y="213" width="99.9903%" height="15" fill="rgb(210,16,53)" fg:x="1" fg:w="20539"/><text x="0.2549%" y="223.50">magic_square_of_squares`std::rt::lang_start::_{{closure}}</text></g><g><title>magic_square_of_squares`std::sys::backtrace::__rust_begin_short_backtrace (20,539 samples, 99.99%)</title><rect x="0.0049%" y="197" width="99.9903%" height="15" fill="rgb(235,124,12)" fg:x="1" fg:w="20539"/><text x="0.2549%" y="207.50">magic_square_of_squares`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>magic_square_of_squares`magic_square_of_squares::main (20,539 samples, 99.99%)</title><rect x="0.0049%" y="181" width="99.9903%" height="15" fill="rgb(224,169,11)" fg:x="1" fg:w="20539"/><text x="0.2549%" y="191.50">magic_square_of_squares`magic_square_of_squares::main</text></g><g><title>magic_square_of_squares`std::thread::local::LocalKey&lt;T&gt;::with (38 samples, 0.18%)</title><rect x="99.8101%" y="165" width="0.1850%" height="15" fill="rgb(250,166,2)" fg:x="20502" fg:w="38"/><text x="100.0601%" y="175.50"></text></g><g><title>all (20,541 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="20541"/><text x="0.2500%" y="287.50"></text></g></svg></svg>